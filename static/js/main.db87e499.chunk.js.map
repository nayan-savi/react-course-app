{"version":3,"sources":["TutotPoint_logo.png","components/common/CommonService.js","components/common/CourseForm.js","components/course/AddCourse.js","components/common/CourseTable.js","components/course/DisplayCourse.js","components/CourseMenu.js","components/course/HomeCourse.js","components/course/About.js","components/course/EditCourse.js","components/course/PageNotFound.js","components/router/CourseRouter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CommonService","mode","headers","today","Date","Yup","courseName","required","startDate","min","endDate","trainerName","availability","autoClose","position","closeButton","id","CourseForm","props","initialValues","validationSchema","onSubmit","className","htmlFor","name","component","courseNames","map","index","key","type","commonService","config","getConfig","getCourseNames","getInitialValues","getValidationSchema","AddCourse","course","a","resetForm","axios","post","then","response","status","toast","success","getToastOptions","catch","error","CourseTable","Table","courses","length","days","toString","Button","onClick","editRow","handlerClick","colSpan","DisplayCourse","useState","setCourses","editing","setEditing","console","log","data","put","setTimeout","useEffect","get","window","confirm","delete","filter","c","CourseMenu","Navbar","bg","variant","Nav","Link","href","process","NavDropdown","title","Item","HomeCourse","About","src","logo","width","height","alt","EditCourse","PageNotFound","CourseRouter","exact","path","App","basename","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.db87e499.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/TutotPoint_logo.01b09eab.png\";","import * as Yup from \"yup\";\r\n\r\nclass CommonService {\r\n\r\n    getCourseNames() {\r\n        return [\"Java\", \"React Hooks\", \"Spring Boot\", \"CSS\", \"HTML\", \"AWS\", \"Android\", \"Game Development\"];\r\n    }\r\n\r\n    getConfig() {\r\n        return {\r\n            mode: 'no-cors',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin': '*',\r\n                'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',\r\n            }\r\n        }\r\n    }\r\n\r\n    getValidationSchema() {\r\n        const today = new Date();\r\n        return Yup.object({\r\n            courseName: Yup.string().required('CourseName is required!'),\r\n            startDate: Yup.date().required('StartDate is required!').min(today, 'StartDate should be greater than today.'),\r\n            endDate: Yup.date().required('EndDate is required!'),\r\n            trainerName: Yup.string().required('TrainerName is required!'),\r\n            availability: Yup.string().required('Availability is required!')\r\n        })\r\n    }\r\n\r\n    getToastOptions() {\r\n        return {\r\n            autoClose: 2000,\r\n            position: \"top-right\",\r\n            closeButton: false\r\n        };\r\n    }\r\n\r\n    getInitialValues() {\r\n        return {\r\n            id: '',\r\n            courseName: '',\r\n            startDate: '',\r\n            endDate: '',\r\n            trainerName: '',\r\n            availability: ''\r\n        };\r\n    }\r\n\r\n}\r\n\r\nexport default CommonService;","import React from 'react';\r\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\r\nimport {ToastContainer} from \"react-toastify\";\r\n\r\n\r\nconst CourseForm = (props) => {\r\n\r\n    return (\r\n        <Formik initialValues={props.initialValues} validationSchema={props.validationSchema} onSubmit={props.onSubmit}>\r\n            <Form>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"courseName\" className=\"float-left\">Course Name</label>\r\n                    <Field name=\"courseName\" component=\"select\" className=\"form-control\">\r\n                        <option></option>\r\n                        {\r\n                            props.courseNames.map((name, index) => {\r\n                                return (<option key={index}>{name}</option>)\r\n                            })\r\n                        }\r\n                    </Field>\r\n                    <ErrorMessage name=\"courseName\" className=\"errors\" component=\"div\"/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"startDate\" className=\"float-left\">Start Date</label>\r\n                    <Field type=\"date\" className=\"form-control\" name=\"startDate\"/>\r\n                    <ErrorMessage name=\"startDate\" className=\"errors\" component=\"div\"/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"endDate\" className=\"float-left\">End Date</label>\r\n                    <Field type=\"date\" className=\"form-control\" name=\"endDate\"/>\r\n                    <ErrorMessage name=\"endDate\" className=\"errors\" component=\"div\"/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"trainerName\" className=\"float-left\">Trainer Name</label>\r\n                    <Field type=\"text\" className=\"form-control\" name=\"trainerName\"/>\r\n                    <ErrorMessage name=\"trainerName\" className=\"errors\" component=\"div\"/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"availability\" className=\"float-left\">Availability</label>\r\n                    <Field type=\"text\" className=\"form-control\" name=\"availability\"/>\r\n                    <ErrorMessage name=\"availability\" className=\"errors\" component=\"div\"/>\r\n                </div>\r\n                <div>\r\n                    <button type=\"submit\" className=\"btn btn-primary mr-3\">Submit</button>\r\n                    <button type=\"reset\" className=\"btn btn-secondary\">Reset</button>\r\n                </div>\r\n\r\n                <ToastContainer/>\r\n            </Form>\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default CourseForm;","import React from 'react';\r\nimport axios from 'axios';\r\nimport {toast} from 'react-toastify';\r\nimport CommonService from \"../common/CommonService\";\r\nimport CourseForm from \"../common/CourseForm\";\r\n\r\n\r\nlet commonService = new CommonService();\r\nconst config = commonService.getConfig();\r\nconst courseNames = commonService.getCourseNames();\r\nconst initialValues = commonService.getInitialValues();\r\nconst validationSchema = commonService.getValidationSchema();\r\nconst createUrl = \"http://localhost:8080/api/create\";\r\n\r\nconst AddCourse = () => {\r\n\r\n\r\n    const onSubmit = async (course, {resetForm}) => {\r\n        await axios.post(createUrl, course, config)\r\n            .then(response => {\r\n                if(response.status === 200) {\r\n                    toast.success('Data saved.', commonService.getToastOptions());\r\n                    resetForm();\r\n                }\r\n            })\r\n            .catch(error => {\r\n                toast.error('Issue while saving...');\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className=\"addCourse\">\r\n            <h1>Add Course</h1>\r\n            <CourseForm initialValues={initialValues} validationSchema={validationSchema} courseNames={courseNames} onSubmit={onSubmit}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddCourse;","import React from 'react';\r\nimport {Button, Table} from \"react-bootstrap\";\r\nimport {Icon} from \"@opuscapita/react-icons\";\r\n\r\nconst CourseTable = (props) => {\r\n    return (\r\n        <Table className=\"table table-hover\">\r\n            <thead>\r\n            <tr>\r\n                <th>CourseName</th>\r\n                <th>StartDate</th>\r\n                <th>EndDate</th>\r\n                <th>Total Days</th>\r\n                <th>TrainerName</th>\r\n                <th>Availability</th>\r\n                <th>Action</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {\r\n                props.courses.length > 0 ? (\r\n                    props.courses.map((course) => {\r\n                        const {id, courseName, startDate, endDate, days, trainerName, availability} = course;\r\n                        return (\r\n                            <tr key={id.toString()}>\r\n                                <td>{courseName}</td>\r\n                                <td>{startDate}</td>\r\n                                <td>{endDate}</td>\r\n                                <td>{days}</td>\r\n                                <td>{trainerName}</td>\r\n                                <td>{availability}</td>\r\n                                <td>\r\n                                    <Button className=\"btn btn-primary mr-3\"\r\n                                            onClick={() => props.editRow(course)}><Icon type=\"indicator\" name=\"edit\" /></Button>\r\n                                    <Button type=\"button\" className=\"btn btn-danger\"\r\n                                            onClick={() => props.handlerClick(course)}><Icon type=\"indicator\" name=\"delete\" /> </Button>\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    })\r\n                ) : (<tr>\r\n                    <td colSpan=\"7\">No records found</td>\r\n                </tr>)\r\n            }\r\n            </tbody>\r\n        </Table>\r\n    );\r\n};\r\n\r\nexport default CourseTable;","import React, {useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport {toast, ToastContainer} from 'react-toastify';\r\nimport CommonService from \"../common/CommonService\";\r\nimport CourseForm from \"../common/CourseForm\";\r\nimport CourseTable from \"../common/CourseTable\";\r\n\r\nconst getUrl = \"http://localhost:8080/api/courses\";\r\nconst deleteUrl = \"http://localhost:8080/api/delete/\";\r\nconst updateCourse = \"http://localhost:8080/api/course\";\r\n\r\nlet commonService = new CommonService();\r\nconst config = commonService.getConfig();\r\nconst initialValues = commonService.getInitialValues();\r\nconst validationSchema = commonService.getValidationSchema();\r\nconst courseNames = commonService.getCourseNames();\r\n\r\nconst setValues = (data) => {\r\n    initialValues.id = data.id;\r\n    initialValues.courseName = data.courseName;\r\n    initialValues.startDate = data.startDate;\r\n    initialValues.endDate = data.endDate;\r\n    initialValues.trainerName = data.trainerName;\r\n    initialValues.availability = data.availability;\r\n}\r\n\r\nconst DisplayCourse = () => {\r\n    const [courses, setCourses] = useState([]);\r\n\r\n    const [editing, setEditing] = useState(false);\r\n\r\n    const editRow = async (course) => {\r\n        console.log(course)\r\n        setEditing(true);\r\n        setValues(course);\r\n    }\r\n\r\n    const onSubmit = async (course) => {\r\n        await axios.put(updateCourse, course, config)\r\n            .then(() => {\r\n                toast.success('Data updated.', commonService.getToastOptions());\r\n                setTimeout(() => {\r\n                    setEditing(false);\r\n                }, 2000);\r\n            })\r\n            .catch(error => {\r\n                toast.error('Issue while updating...');\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(getUrl, config)\r\n            .then(response => {\r\n                setCourses(response.data);\r\n            }).catch(error => console.log(error));\r\n    }, [courses]);\r\n\r\n    const handlerClick = (course) => {\r\n        let isConfirmed = window.confirm('Are you sure you wish to delete ' + course.courseName+' course?');\r\n        if(isConfirmed) {\r\n            axios.delete(deleteUrl + course.id, config)\r\n                .then(response => {\r\n                    if(response.status === 200){\r\n                        toast.success(\"Record Deleted.\", commonService.getToastOptions());\r\n                        setCourses(courses.filter(c => c.id !== course.id));\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    toast.error('Issue while deleting...');\r\n                });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !editing ? (\r\n                    <div>\r\n                        <h1>Course Details</h1>\r\n                        <CourseTable courses={courses} editRow={editRow} handlerClick={handlerClick}/>\r\n                        <ToastContainer/>\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"addCourse\">\r\n                        <h1>Update Course</h1>\r\n                        <CourseForm initialValues={initialValues} validationSchema={validationSchema} courseNames={courseNames} onSubmit={onSubmit}/>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DisplayCourse;","import React from 'react';\r\nimport {NavDropdown, Nav, Navbar} from 'react-bootstrap';\r\n\r\nconst CourseMenu = () => {\r\n    return (\r\n        <Navbar bg=\"primary\" variant=\"dark\">\r\n            <Nav className=\"mr-auto\">\r\n                <Nav.Link href={process.env.PUBLIC_URL+'#/'}>Home</Nav.Link>\r\n                <NavDropdown title=\"Course\" id=\"basic-nav-dropdown\">\r\n                    <NavDropdown.Item href={process.env.PUBLIC_URL+ '#/addCourse'}>Add Course</NavDropdown.Item>\r\n                    <NavDropdown.Item href={process.env.PUBLIC_URL+ '#/displayCourse'}>Display Course</NavDropdown.Item>\r\n                </NavDropdown>\r\n                <Nav.Link href={process.env.PUBLIC_URL+ '#/about'}>About</Nav.Link>\r\n            </Nav>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default CourseMenu;","import React from 'react';\r\n\r\nconst HomeCourse = () => {\r\n    return (\r\n        <div>\r\n            <h1>Course Application</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomeCourse;","import React from 'react';\r\nimport logo from '../../TutotPoint_logo.png'\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n            <br/><br/><br/>\r\n            <img src={logo} className=\"App-logo\" width=\"300\" height=\"300\" alt=\"\"/><br/><br/>\r\n            by <h3>tutor.point@gmail.com</h3>\r\n            <h1>Course Application</h1>\r\n            <p>We can add, modify, update and delete course records</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default About;","import React from 'react';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst EditCourse = () => {\r\n    return (\r\n        <div className=\"addCourse\">\r\n            <h1>Course Details</h1>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditCourse;","import React from 'react';\r\n\r\nconst PageNotFound = () => {\r\n    return (\r\n        <div>\r\n            <h1>Page not found</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PageNotFound;","import React from 'react';\r\nimport {Route, Switch} from \"react-router\";\r\nimport AddCourse from \"../course/AddCourse\";\r\nimport DisplayCourse from \"../course/DisplayCourse\";\r\nimport CourseMenu from \"../CourseMenu\";\r\nimport HomeCourse from \"../course/HomeCourse\";\r\nimport About from \"../course/About\";\r\nimport EditCourse from \"../course/EditCourse\";\r\nimport PageNotFound from \"../course/PageNotFound\";\r\n\r\nconst CourseRouter = () => {\r\n    return (\r\n        <div>\r\n            <CourseMenu/>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={ HomeCourse } />\r\n                <Route exact path=\"/addCourse\" component={ AddCourse } />\r\n                <Route exact path=\"/displayCourse\" component={ DisplayCourse } />\r\n                <Route exact path=\"/editCourse\" component={ EditCourse } />\r\n                <Route exact path=\"/about\" component={ About } />\r\n                <Route component={PageNotFound} />\r\n            </Switch>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CourseRouter;","import React from 'react';\nimport './App.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport CourseRouter from \"./components/router/CourseRouter\";\nimport {HashRouter} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <HashRouter basename={process.env.PUBLIC_URL}>\n            <CourseRouter/>\n        </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}